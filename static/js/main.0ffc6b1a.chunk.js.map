{"version":3,"sources":["useWordGame.js","App.js","index.js"],"names":["useWordGame","timeToType","useState","inputText","setInputText","remainingTime","setRemainingTime","start","setStart","handleInputText","event","target","value","textareaRef","useRef","calculateWordCount","inputParam","trim","split","filter","word","length","startAgain","useEffect","setTimeout","prevRemainingTime","current","focus","App","ref","disabled","onChange","placeholder","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAgDeA,MA9Cf,WAAuC,IAAlBC,EAAiB,uDAAJ,GAAI,EACFC,mBAAS,IADP,mBAC7BC,EAD6B,KAClBC,EADkB,OAEMF,mBAASD,GAFf,mBAE7BI,EAF6B,KAEdC,EAFc,OAGVJ,oBAAS,GAHC,mBAG7BK,EAH6B,KAGtBC,EAHsB,KAI9BC,EAAkB,SAACC,GACvBN,EAAaM,EAAMC,OAAOC,QAGtBC,EAAcC,iBAAO,MAErBC,EAAqB,SAACC,GAK1B,OAJgBA,EACbC,OACAC,MAAM,KACNC,QAAO,SAACC,GAAD,MAAmB,KAATA,KAAaC,QAI7BC,EAAa,WACjBd,GAAS,GACTF,EAAiBL,GACjBG,EAAa,KAcf,OAXAmB,qBAAU,WACJlB,EAAgB,GAAKE,GACvBiB,YAAW,WACTlB,GAAiB,SAACmB,GAAD,OAAuBA,EAAoB,OAC3D,KACHZ,EAAYa,QAAQC,SAEpBnB,GAAS,KAEV,CAACH,EAAeE,IAEZ,CACLM,cACAN,QACAJ,YACAM,kBACAJ,gBACAiB,aACAP,uB,cCTWa,MA/Bf,WAAgB,IAAD,EAST5B,IAPFa,EAFW,EAEXA,YACAN,EAHW,EAGXA,MACAJ,EAJW,EAIXA,UACAM,EALW,EAKXA,gBACAJ,EANW,EAMXA,cACAiB,EAPW,EAOXA,WACAP,EARW,EAQXA,mBAEF,OACE,gCACE,mDACA,0BACEc,IAAKhB,EACLiB,UAAWvB,EACXK,MAAOT,EACP4B,SAAUtB,EACVuB,YAAY,iBAEd,kDAAqB3B,KACrB,wBAAQyB,SAAUvB,EAAO0B,QAASX,EAAlC,mBAGA,8CACiC,IAAlBjB,EAAsBU,EAAmBZ,GAAa,UCzB3E+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.0ffc6b1a.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction useWordGame(timeToType = 10) {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [remainingTime, setRemainingTime] = useState(timeToType);\r\n  const [start, setStart] = useState(false);\r\n  const handleInputText = (event) => {\r\n    setInputText(event.target.value);\r\n  };\r\n\r\n  const textareaRef = useRef(null);\r\n\r\n  const calculateWordCount = (inputParam) => {\r\n    let wordCount = inputParam\r\n      .trim()\r\n      .split(\" \")\r\n      .filter((word) => word !== \"\").length;\r\n    return wordCount;\r\n  };\r\n\r\n  const startAgain = () => {\r\n    setStart(true);\r\n    setRemainingTime(timeToType);\r\n    setInputText(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (remainingTime > 0 && start) {\r\n      setTimeout(() => {\r\n        setRemainingTime((prevRemainingTime) => prevRemainingTime - 1);\r\n      }, 1000);\r\n      textareaRef.current.focus();\r\n    } else {\r\n      setStart(false);\r\n    }\r\n  }, [remainingTime, start]);\r\n\r\n  return {\r\n    textareaRef,\r\n    start,\r\n    inputText,\r\n    handleInputText,\r\n    remainingTime,\r\n    startAgain,\r\n    calculateWordCount,\r\n  };\r\n}\r\n\r\nexport default useWordGame;\r\n","import React from \"react\";\nimport useWordGame from \"./useWordGame\";\nimport \"./App.css\";\n\nfunction App() {\n  const {\n    textareaRef,\n    start,\n    inputText,\n    handleInputText,\n    remainingTime,\n    startAgain,\n    calculateWordCount,\n  } = useWordGame();\n  return (\n    <div>\n      <h1>Speed typing game</h1>\n      <textarea\n        ref={textareaRef}\n        disabled={!start}\n        value={inputText}\n        onChange={handleInputText}\n        placeholder=\"Start typing\"\n      />\n      <h4>Remaining time: {remainingTime}</h4>\n      <button disabled={start} onClick={startAgain}>\n        Start\n      </button>\n      <h1>\n        Word count: {remainingTime === 0 ? calculateWordCount(inputText) : \"\"}\n      </h1>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}